import os
import subprocess
from pathlib import Path

import click

from oeps.clients.explorer import Explorer
from oeps.config import (
    EXPLORER_ROOT_DIR,
    RESOURCES_DIR,
    CACHE_DIR,
)

# Make relative paths for directory configs so they can properly be used as default values for 
# CLI arguments. Using absolute paths (e.g. those in the config) would result in absolute paths
# in the generated docs... this would be incorrect on every system besides the one that had 
# generated the docs.
EXPLORER_ROOT_DIR_rel = os.path.relpath(EXPLORER_ROOT_DIR, start=Path(__file__).parent)
RESOURCES_DIR_rel = os.path.relpath(RESOURCES_DIR, start=Path(__file__).parent.parent)
CACHE_DIR_rel = os.path.relpath(CACHE_DIR, start=Path(__file__).parent.parent)


@click.command()
@click.option('--source', "-s",
    help="Optional input path for data resource schema files.",
    default=RESOURCES_DIR_rel,
    type=click.Path(
        resolve_path=True,
        path_type=Path,
    ),
)
@click.option('--root-dir',
    help="Optional output path for config files. The default location will overwrite existing configs.",
    default=EXPLORER_ROOT_DIR_rel,
    type=click.Path(
        resolve_path=True,
        path_type=Path,
    ),
)
@click.option('--make-csvs',
    help="Only write new config JSON files, assumes CSV files are already generated.",
    default=False,
    is_flag=True,
)
def configure_explorer(source: Path, root_dir: Path, make_csvs: bool=False):
    """Builds configuration files for the frontend OEPS Explorer application."""

    ex = Explorer(root_dir=root_dir)
    ex.build_config(schema_dir=source, write_csvs=make_csvs)


@click.command()
def make_cli_docs():
    """Generates markdown-formatted documentation from all CLI commands groups."""

    docs_path = Path("../docs/commands")

    ## list of base modules and commands to process
    command_list = [
        ('oeps.commands.general', 'configure_explorer'),
        ('oeps.commands.general', 'make_cli_docs'),
        ('oeps.commands.bigquery', 'bigquery_grp'),
        ('oeps.commands.census', 'census_grp'),
        ('oeps.commands.frictionless', 'frictionless_grp'),
        ('oeps.commands.overture', 'overture_grp'),
    ]

    for mod, com in command_list:
        mdclick_cmd = [
            "mdclick", "dumps",
            "--baseModule", mod,
            "--baseCommand", com,
            "--docsPath", docs_path
        ]
        subprocess.run(mdclick_cmd)

    index_groups = set()
    paths = sorted([i for i in docs_path.glob("*.md") if not i.name == 'README.md'])
    for path in paths:
        index_groups.add(path.stem.split("-")[0])

    index_content = [
        "# OEPS Backend -- CLI Commands\n\n",
        "The CLI provides the following groups of commands for managing OEPS data in different contexts.\n\n",
        "All of these commands must be invoked with the prefix `flask`, for example:\n\n",
        "```\nflask bigquery check-credentials\n```\n\n",
        "Use `--help` to get detailed information for each command, or look at the auto-generated documentation below.\n\n",
    ]
    for group in sorted(index_groups):
        index_content.append(f"- [{group}](./{group}.md)\n")
        for path in sorted(docs_path.glob(f"{group}-*.md")):
            subcommand = path.stem.replace(f"{group}-", "")
            index_content.append(f"  - [{subcommand}](./{path.stem}.md)\n")

    with open(docs_path / 'README.md', "w") as o:
        o.writelines("".join(index_content))

    for path in docs_path.glob("*.md"):
        with open(path, "a") as o:
            o.write("\n_This documentation is automatically generated by "\
                "[md-click](https://github.com/RiveryIo/md-click). Do not edit this file directly._\n")
