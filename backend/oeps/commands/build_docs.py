import os
import csv
from pathlib import Path
import subprocess

import click

from oeps.clients.bigquery import BigQuery
from oeps.clients.registry import Registry

from ._common_opts import (
    add_common_opts,
    registry_opt,
)


@click.command()
@click.argument(
    "operation",
)
@add_common_opts(registry_opt)
def build_docs(operation, registry_path):
    """Generates verious documentation pages based on the data content.

    OPERATION (choose one)

    bq-reference: build reference file for Big Query tables

    cli: create all documentation for the CLI interface

    registry-summary: build summary CSV files of all content in the registry

    """

    def generate_md_table(header, rows):
        content = "|".join(header) + "\n"
        content += "|".join(["-" for i in header]) + "\n"
        for row in rows:
            content += "|".join(row) + "\n"
        return content

    def clean_value(value, md=False):
        if isinstance(value, str):
            return value.replace("\n", "<br>")
        elif isinstance(value, list):
            join_char = "<br/>" if md else ", "
            return join_char.join(value)
        else:
            return str(value)

    if operation == "bq-reference":
        client = BigQuery()
        registry = Registry(registry_path)

        outfile = Path("../docs/src/reference/bigquery/tables.md").absolute().resolve()
        client.generate_reference_doc(registry.get_all_sources(), outfile)

    elif operation == "cli":
        docs_path = Path("../docs/src/reference/cli")
        for path in docs_path.glob("*.md"):
            os.remove(path)

        ## list of base modules and commands to process
        command_list = [
            ("oeps.commands.bigquery_export", "bigquery_export"),
            ("oeps.commands.bigquery_upload", "bigquery_upload"),
            ("oeps.commands.build_docs", "build_docs"),
            ("oeps.commands.build_explorer_docs", "build_explorer_docs"),
            ("oeps.commands.build_explorer_map", "build_explorer_map"),
            ("oeps.commands.create_data_dictionaries", "create_data_dictionaries"),
            ("oeps.commands.create_data_package", "create_data_package"),
            ("oeps.commands.merge_data_table", "merge_csv"),
            ("oeps.commands.validate_registry", "validate_registry"),
            ("oeps.commands.move_variable", "move_variable"),
            ("oeps.commands.remove_variable", "remove_variable"),
        ]

        for mod, com in command_list:
            mdclick_cmd = [
                "mdclick",
                "dumps",
                "--baseModule",
                mod,
                "--baseCommand",
                com,
                "--docsPath",
                docs_path,
            ]
            subprocess.run(mdclick_cmd)

        for path in docs_path.glob("*.md"):
            with open(path, "a") as o:
                o.write(
                    "!!! note\n    _This documentation is automatically generated. Do not edit this file directly._\n"
                )

    elif operation == "registry-summary":

        def write_csv_file(name, header, rows):
            path = Path(f"../docs/src/reference/registry/{name}.csv")
            with open(path, "w") as o:
                writer = csv.writer(o)
                writer.writerow(header)
                writer.writerows(rows)

        registry = Registry()

        ## Create VARIABLES content

        variables = list(registry.variables.values())
        var_cols = [
            "name",
            "title",
            "type",
            "example",
            "description",
            "table_sources",
            "metadata",
            "longitudinal",
            "analysis",
        ]
        var_rows_csv = []
        for var in sorted(variables, key=lambda x: x["name"]):
            var_rows_csv.append([clean_value(var[i]) for i in var_cols])

        ## Create THEME content

        metadata_cols = ["theme", "construct", "proxy", "metadata", "url"]
        metadata_rows = []

        for theme, constructs in registry.theme_tree.items():
            for construct, metadata_entries in constructs.items():
                for metadata in metadata_entries:
                    md = registry.metadata[metadata]
                    metadata_rows.append(
                        [theme, construct, md["proxy"], metadata, md["url"]]
                    )

        ## Create TABLE SOURCES content

        table_sources = list(registry.table_sources.values())
        tab_cols = [
            "name",
            "title",
            "path",
            "format",
            "mediatype",
            "description",
            "year",
            "geodata_source",
            "bq_dataset_name",
            "bq_table_name",
        ]
        tab_rows = []
        for var in table_sources:
            tab_rows.append([clean_value(var[i]) for i in tab_cols])

        ## Create GEODATA SOURCES content

        geodata_sources = list(registry.geodata_sources.values())
        geo_cols = [
            "name",
            "title",
            "path",
            "format",
            "mediatype",
            "description",
            "summary_level",
            "bq_dataset_name",
            "bq_table_name",
        ]
        geo_rows = []
        for var in geodata_sources:
            geo_rows.append([clean_value(var[i]) for i in geo_cols])

        write_csv_file("variables", var_cols, var_rows_csv)
        write_csv_file("metadata", metadata_cols, metadata_rows)
        write_csv_file("table_sources", tab_cols, tab_rows)
        write_csv_file("geodata_sources", geo_cols, geo_rows)

    else:
        print("invalid operation")
